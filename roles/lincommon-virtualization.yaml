description: virtualization parameter for lincommon role
internal: yes
parameters:
  CPUVTfeatures:
    _type: scalar
    _script: |
      #!/bin/bash

      VTsupported=no
      VTfeatures=''
      
      flags=$(awk -F':' '$1~"flags" {print $2}' /proc/cpuinfo)
      
      for flag in $flags; do
          if [ $flag == "vmx" ]; then
              VTsupported=yes
              VTfeatures="Intel VT-x"
          fi
          if [ $flag == "svm" ]; then
              VTsupported=yes
              VTfeatures="AMD SVM"
          fi
      done
      
      if [ $VTsupported == "yes" ]; then
          for flag in $flags; do
              [ $flag == "ept" ] && VTfeatures="$VTfeatures, Intel Extended Page Tables"
              [ $flag == "vpid" ] && VTfeatures="$VTfeatures, Intel VPID"
              [ $flag == "npt" ] && VTfeatures="$VTfeatures, AMD Nested Page Tables"
              [ $flag == "vnmi" ] && VTfeatures="$VTfeatures, Intel Virtual NMI"
              [ $flag == "tpr_shadow" ] && VTfeatures="$VTfeatures, Intel TPR Shadow"
              [ $flag == "flexpriority" ] && VTfeatures="$VTfeatures, Intel FlexPriority"
          done
      fi
      
      echo $VTfeatures
      
  virtualization: 
    _type: scalar
    _script: |
      #!/usr/bin/env python
      # LICENSE: MIT
      # original: http://people.redhat.com/~rjones/virt-what/
      import struct
      
      
      def cpuHypervisorID():
          # we cannot (yet) use _cpuid because of the different
          # unpack format.
          HYPERVISOR_CPUID_LEAF = 0x40000000
          with open('/dev/cpu/0/cpuid', 'rb') as f:
              f.seek(HYPERVISOR_CPUID_LEAF)
              c = struct.unpack('I12s', f.read(16))
              return c[1].strip('\x00')
      
      
      def cpuModelName():
          with open('/proc/cpuinfo', 'rt') as f:
              for line in f:
                  if ':' in line:
                      k, v = line.split(':', 1)
                      k = k.strip()
                      if k == 'model name':
                          return v.strip()
          return ''
      
      
      def findHypervisor():
          name = ''
          try:
              hid = cpuHypervisorID()
              if hid == 'VMwareVMware':
                  name = 'vmware'
              elif hid == 'Microsoft Hv':
                  name = 'hyperv'
              elif hid == 'XenVMMXenVMM':
                  name = 'xen'
              elif hid == 'KVMKVMKVM':
                  name = 'kvm'
              elif 'QEMU' in cpuModelName():
                  name = 'qemu'
          except:
              pass# TODO
          return name
      
      
      if __name__ == '__main__':
          print findHypervisor() or 'bare metal'

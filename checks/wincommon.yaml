description: Common checks for all windows roles
parameters:
  hostname: ps|hostname
  sid: ps|(Get-WmiObject Win32_UserAccount -Filter 'LocalAccount=true and sid like "S-1-5-21%-500"').SID -replace "-500$"
  time: ps|get-date
  uptime: ps|function Get-PCUptime {param($computer);
                 $lastboottime = (Get-WmiObject -Class Win32_OperatingSystem
                                     -computername $computer).LastBootUpTime;
                 $sysuptime = (Get-Date) â€“ [System.Management.ManagementDateTimeconverter]::ToDateTime($lastboottime);
                 Write-Host $sysuptime.days "days"
                            $sysuptime.hours "hours"
                            $sysuptime.minutes "minutes"
                            $sysuptime.seconds "seconds";};
             Get-PCuptime -computer (hostname)
  OS: ps|(Get-WmiObject Win32_OperatingSystem).Caption
  SP_level: ps|(Get-WmiObject Win32_OperatingSystem).CSDVersion
  Arch: ps|(Get-WmiObject Win32_OperatingSystem).OSArchitecture
  Activation: ps|Function ActivationStatus($code) {switch($code)
                     { 0 {"Unlicensed"}; 1 {"Licensed"}; 2 {"Out-Of-Box Grace Period"};
                       3 {"Out-Of-Tolerance Grace Period"}; 4 {"Non-Genuine Grace Period"};
                       5 {"Notification"}; 6 {"Extended Grace"}; default {"Unknown value"}}};
                 $wpa = Get-WmiObject -class SoftwareLicensingProduct | Where{$_.LicenseStatus -eq "1"};
                 if($wpa){ foreach($item in $wpa)
                               { $OSActivationStatus = ActivationStatus($item.LicenseStatus) }}
                 else{ $OSActivationStatus = "Unlicensed" };
                 Write-Host $OSActivationStatus;
  ram(GB): ps|[math]::round(((Get-WmiObject Win32_ComputerSystem).TotalPhysicalMemory/1gb), 0)
  
